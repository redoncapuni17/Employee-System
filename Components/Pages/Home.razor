@page "/"

@using EmployeeSystem.Model.EmployeeSystem.Model;
@using EmployeeSystem.Controllers;
@inject NavigationManager Navigation
@inject EmployeeController employeeController;
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="@(IsModalVisible ? "dimmed" : "")">

    <h1>Welcome Back !</h1>

    <div class="row">
        <div class="col-md-4">
            <div class="card shadow custom-card" style="border: 1px solid #007bff;">
                <div class="card-body">
                    <h4 class="card-title">All Employee</h4>
                    <div class="d-flex justify-content-between align-items-center">
                        <p class="card-text mb-0" style="font-size: 2rem; font-weight: bold;">@employees.Count</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card shadow custom-card" style="border: 1px solid #28a745;">
                <div class="card-body">
                    <h4 class="card-title">Salary</h4>
                    <div class="d-flex justify-content-between align-items-center">
                        <p class="card-text mb-0" style="font-size: 2rem; font-weight: bold;">@TotalSalary $</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card shadow custom-card" style="border: 1px solid #dc3545;">
                <div class="card-body">
                    <h4 class="card-title">Custom Card</h4>
                    <a href="/custom-card" class="btn btn-primary">Go</a>
                </div>
            </div>
        </div>
    </div>

    <style>
        .custom-card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .custom-card:hover {
                transform: translateY(-7px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            }

        .dimmed {
            opacity: 0.25;
            transition: opacity 0.3s ease;
        }
    </style>

    <hr />
    <h2>Employee Details</h2>

    <div class="border rounded shadow bg-white p-3 mb-5 mt-4 h-50 overflow-auto">
        <EditForm Model="@employees" OnValidSubmit="SearchEmployees">
            <div class="d-flex align-items-center mb-3 w-50">
                <input type="text" class="form-control me-2" placeholder="Search employees..." @bind-value="searchName" @oninput="OnSearchInput" />
                <button type="submit" class="btn btn-primary">Search</button>
            </div>
        </EditForm>

        <table class="table table-hover bg-white bg-gradient">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Salary</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in employees)
                {
                    <tr>
                        <td>@employee.Name</td>
                        <td>@employee.Position</td>
                        <td>@employee.Salary</td>
                        <td>
                            <button type="button" class="btn btn-primary" @onclick="() => NavigateToEdit(employee.Id)">Edit</button>
                            <button type="button" class="btn btn-danger" @onclick="() => ShowDeleteModal(employee.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<WarningModal @ref="warningModal" OnConfirm="DeleteEmployee" OnCancel="HideDeleteModal" />

@code {
    private List<Employee> employees = new List<Employee>();
    private decimal TotalSalary => employees.Sum(e => e.Salary);
    private WarningModal warningModal;
    private bool IsModalVisible => warningModal?.IsVisible ?? false;

    private string searchName = string.Empty;
    private int? employeeToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        employees = await employeeController.GetEmployees();
        StateHasChanged();
    }

    private void NavigateToEdit(int employeeId)
    {
        Navigation.NavigateTo($"/employee/{employeeId}");
    }

    private async Task SearchEmployees()
    {
        if (string.IsNullOrWhiteSpace(searchName))
        {
            await LoadEmployees();
        }
        else
        {
            employees = await employeeController.SearchEmployeesByName(searchName);
        }
        StateHasChanged();
    }

    private async void DeleteEmployee(int employeeId)
    {
        await employeeController.DeleteEmployee(employeeId);
        await LoadEmployees();
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchName = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(searchName))
        {
            await LoadEmployees();
        }
    }

    private void ShowDeleteModal(int employeeId)
    {
        employeeToDelete = employeeId;
        warningModal.Show(employeeId);
    }

    private void HideDeleteModal()
    {
        employeeToDelete = null;
        StateHasChanged();
    }
}
