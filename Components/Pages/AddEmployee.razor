@page "/employee"

@using EmployeeSystem.Model.EmployeeSystem.Model;
@using EmployeeSystem.Data
@inject AppDbContext DbContext
@inject EmployeeSystem.Controllers.EmployeeController employeeController
@rendermode InteractiveServer

<div class="container mt-5">
    <div class="card">
        <div class="card-header">
            <h2>Add Employee</h2>
        </div>
        <div class="card-body">
            <EditForm Model="@employee" OnValidSubmit="HandleValidSubmit" FormName="addEmployeeForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="form-group">
                    <label for="name">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="employee.Name" />
                </div>
                <div class="form-group">
                    <label for="position">Position</label>
                    <InputText id="position" class="form-control" @bind-Value="employee.Position" />
                </div>
                <div class="form-group">
                    <label for="salary">Salary</label>
                    <InputNumber id="salary" class="form-control" @bind-Value="employee.Salary" />
                </div>

                <button type="submit" class="btn btn-primary">Add Employee</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Employee employee = new Employee();

    private async Task HandleValidSubmit()
    {
        try
        {
            await employeeController.AddEmployeeAsync(employee);
            
            employee = new Employee(); // Clear form
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
